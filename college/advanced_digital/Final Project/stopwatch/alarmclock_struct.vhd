-- hds header_start
--
-- VHDL Entity DigAlarm.AlarmClock.symbol
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:50:09 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY AlarmClock IS
   PORT( 
      hours     : IN     std_logic;
      min       : IN     std_logic;
      power     : IN     std_logic;
      set_alarm : IN     std_logic;
      set_time  : IN     std_logic;
      Alarm     : OUT    std_logic;
      SegEN     : OUT    std_logic_vector (3 DOWNTO 0);
      display   : OUT    std_logic_vector (6 DOWNTO 0)
   );

-- Declarations

END AlarmClock ;

-- hds interface_end
--
-- VHDL Architecture DigAlarm.AlarmClock.struct
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:50:12 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


LIBRARY DigAlarm;

ARCHITECTURE struct OF AlarmClock IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL AlarmHour    : std_logic;
   SIGNAL AlarmMin     : std_logic;
   SIGNAL Clock        : std_logic;
   SIGNAL CountEN      : std_logic;
   SIGNAL DisplayClock : std_logic_vector(7 DOWNTO 0);
   SIGNAL H1           : std_logic_vector(3 DOWNTO 0);
   SIGNAL H2           : std_logic_vector(3 DOWNTO 0);
   SIGNAL M1           : std_logic_vector(3 DOWNTO 0);
   SIGNAL M1overflow   : std_logic;
   SIGNAL M2           : std_logic_vector(3 DOWNTO 0);
   SIGNAL M2overflow   : std_logic;
   SIGNAL S1overflow   : std_logic;
   SIGNAL S2overflow   : std_logic;
   SIGNAL SEG          : std_logic_vector(3 DOWNTO 0);
   SIGNAL TimeHour     : std_logic;
   SIGNAL TimeMin      : std_logic;


   -- Component Declarations
   COMPONENT AlarmTest
   PORT (
      AlarmHour    : IN     std_logic;
      AlarmMin     : IN     std_logic;
      Clock        : IN     std_logic;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      H1           : IN     std_logic_vector (3 DOWNTO 0);
      H2           : IN     std_logic_vector (3 DOWNTO 0);
      M1           : IN     std_logic_vector (3 DOWNTO 0);
      M2           : IN     std_logic_vector (3 DOWNTO 0);
      Alarm        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT BCDDecoder
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      SEG          : IN     std_logic_vector (3 DOWNTO 0);
      display      : OUT    std_logic_vector (6 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Control
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      hours        : IN     std_logic ;
      min          : IN     std_logic ;
      power        : IN     std_logic ;
      set_alarm    : IN     std_logic ;
      set_time     : IN     std_logic ;
      AlarmHour    : OUT    std_logic ;
      AlarmMin     : OUT    std_logic ;
      CountEN      : OUT    std_logic ;
      TimeHour     : OUT    std_logic ;
      TimeMin      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT DisplayControl
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      H1           : IN     std_logic_vector (3 DOWNTO 0);
      H2           : IN     std_logic_vector (3 DOWNTO 0);
      M1           : IN     std_logic_vector (3 DOWNTO 0);
      M2           : IN     std_logic_vector (3 DOWNTO 0);
      SEG          : OUT    std_logic_vector (3 DOWNTO 0);
      SegEN        : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT H1Counter
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      M2overflow   : IN     std_logic ;
      TimeHour     : IN     std_logic ;
      H1           : OUT    std_logic_vector (3 DOWNTO 0);
      H2           : OUT    std_logic_vector (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT M1Counter
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      S2overflow   : IN     std_logic ;
      TimeMin      : IN     std_logic ;
      M1           : OUT    std_logic_vector (3 DOWNTO 0);
      M1overflow   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT M2Counter
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      M1overflow   : IN     std_logic ;
      M2           : OUT    std_logic_vector (3 DOWNTO 0);
      M2overflow   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT S1Counter
   PORT (
      Clock        : IN     std_logic ;
      CountEN      : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      S1overflow   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT S2Counter
   PORT (
      Clock        : IN     std_logic ;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      S1overflow   : IN     std_logic ;
      S2overflow   : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AlarmTest USE ENTITY DigAlarm.AlarmTest;
   FOR ALL : BCDDecoder USE ENTITY DigAlarm.BCDDecoder;
   FOR ALL : Control USE ENTITY DigAlarm.Control;
   FOR ALL : DisplayControl USE ENTITY DigAlarm.DisplayControl;
   FOR ALL : H1Counter USE ENTITY DigAlarm.H1Counter;
   FOR ALL : M1Counter USE ENTITY DigAlarm.M1Counter;
   FOR ALL : M2Counter USE ENTITY DigAlarm.M2Counter;
   FOR ALL : S1Counter USE ENTITY DigAlarm.S1Counter;
   FOR ALL : S2Counter USE ENTITY DigAlarm.S2Counter;
   -- pragma synthesis_on


BEGIN
   -- Instance port mappings.
   I1 : AlarmTest
      PORT MAP (
         AlarmHour    => AlarmHour,
         AlarmMin     => AlarmMin,
         Clock        => Clock,
         DisplayClock => DisplayClock,
         H1           => H1,
         H2           => H2,
         M1           => M1,
         M2           => M2,
         Alarm        => Alarm
      );
   I8 : BCDDecoder
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         SEG          => SEG,
         display      => display
      );
   I0 : Control
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         hours        => hours,
         min          => min,
         power        => power,
         set_alarm    => set_alarm,
         set_time     => set_time,
         AlarmHour    => AlarmHour,
         AlarmMin     => AlarmMin,
         CountEN      => CountEN,
         TimeHour     => TimeHour,
         TimeMin      => TimeMin
      );
   I5 : DisplayControl
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         H1           => H1,
         H2           => H2,
         M1           => M1,
         M2           => M2,
         SEG          => SEG,
         SegEN        => SegEN
      );
   I4 : H1Counter
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         M2overflow   => M2overflow,
         TimeHour     => TimeHour,
         H1           => H1,
         H2           => H2
      );
   I2 : M1Counter
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         S2overflow   => S2overflow,
         TimeMin      => TimeMin,
         M1           => M1,
         M1overflow   => M1overflow
      );
   I3 : M2Counter
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         M1overflow   => M1overflow,
         M2           => M2,
         M2overflow   => M2overflow
      );
   I6 : S1Counter
      PORT MAP (
         Clock        => Clock,
         CountEN      => CountEN,
         DisplayClock => DisplayClock,
         S1overflow   => S1overflow
      );
   I7 : S2Counter
      PORT MAP (
         Clock        => Clock,
         DisplayClock => DisplayClock,
         S1overflow   => S1overflow,
         S2overflow   => S2overflow
      );

END struct;
