-- hds header_start
--
-- VHDL Entity DigAlarm.Control.interface
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:52:36 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY Control IS
   PORT( 
      Clock        : IN     std_logic;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      hours        : IN     std_logic;
      min          : IN     std_logic;
      power        : IN     std_logic;
      set_alarm    : IN     std_logic;
      set_time     : IN     std_logic;
      AlarmHour    : OUT    std_logic;
      AlarmMin     : OUT    std_logic;
      CountEN      : OUT    std_logic;
      TimeHour     : OUT    std_logic;
      TimeMin      : OUT    std_logic
   );

-- Declarations

END Control ;

-- hds interface_end
--
-- VHDL Architecture DigAlarm.Control.fsm
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:52:36 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE fsm OF Control IS

   -- Architecture Declarations
   TYPE STATE_TYPE IS (
      s0,
      SetTime,
      Count,
      SetAlarm
   );

   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state" ;


   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE ;
   SIGNAL next_state : STATE_TYPE ;

BEGIN

   ----------------------------------------------------------------------------
   clocked : PROCESS(
      Clock
   )
   ----------------------------------------------------------------------------
   BEGIN
      IF (Clock'EVENT AND Clock = '1') THEN
         current_state <= next_state;
         -- Default Assignment To Internals

      END IF;

   END PROCESS clocked;

   ----------------------------------------------------------------------------
   nextstate : PROCESS (
      current_state,
      hours,
      min,
      power,
      set_alarm,
      set_time
   )
   ----------------------------------------------------------------------------
   BEGIN
      CASE current_state IS
      WHEN s0 =>
         IF (power = '0') THEN
            next_state <= s0;
         ELSIF (power = '1' AND set_time = '1') THEN
            next_state <= SetTime;
         ELSIF (power = '1' AND set_alarm = '1') THEN
            next_state <= SetAlarm;
         ELSIF (power = '1' AND set_time = '0' AND set_alarm = '0') THEN
            next_state <= Count;
         ELSE
            next_state <= s0;
         END IF;
      WHEN SetTime =>
         IF (power = '0') THEN
            next_state <= s0;
         ELSIF (set_time = '0') THEN
            next_state <= Count;
         ELSIF (hours = '1') THEN
            next_state <= SetTime;
         ELSIF (min = '1') THEN
            next_state <= SetTime;
         ELSE
            next_state <= SetTime;
         END IF;
      WHEN Count =>
         IF (power = '0') THEN
            next_state <= s0;
         ELSE
            next_state <= Count;
         END IF;
      WHEN SetAlarm =>
         IF (power = '0') THEN
            next_state <= s0;
         ELSIF (set_alarm = '0') THEN
            next_state <= Count;
         ELSIF (min = '1') THEN
            next_state <= SetAlarm;
         ELSIF (hours = '1') THEN
            next_state <= SetAlarm;
         ELSE
            next_state <= SetAlarm;
         END IF;
      WHEN OTHERS =>
         next_state <= s0;
      END CASE;

   END PROCESS nextstate;

   ----------------------------------------------------------------------------
   output : PROCESS (
      current_state,
      hours,
      min,
      power,
      set_alarm,
      set_time
   )
   ----------------------------------------------------------------------------
   BEGIN
      -- Default Assignment
      AlarmHour <= '0';
      AlarmMin <= '0';
      CountEN <= '0';
      TimeHour <= '0';
      TimeMin <= '0';
      -- Default Assignment To Internals

      -- State Actions
      CASE current_state IS
      WHEN SetTime =>
         CountEN <= '0' ;
      WHEN Count =>
         CountEN <= '1';
      WHEN SetAlarm =>
         CountEN <= '0';
      WHEN OTHERS =>
         NULL;
      END CASE;

      -- Transition Actions
      CASE current_state IS
      WHEN SetTime =>
         IF (power = '0') THEN
         ELSIF (set_time = '0') THEN
         ELSIF (hours = '1') THEN
            TimeHour <= '1';
         ELSIF (min = '1') THEN
            TimeMin <= '1';
         END IF;
      WHEN SetAlarm =>
         IF (power = '0') THEN
         ELSIF (set_alarm = '0') THEN
         ELSIF (min = '1') THEN
            AlarmMin <= '1';
         ELSIF (hours = '1') THEN
            AlarmHour <= '1';
         END IF;
      WHEN OTHERS =>
         NULL;
      END CASE;

   END PROCESS output;

   -- Concurrent Statements

END fsm;
