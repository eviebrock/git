-- hds header_start
--
-- VHDL Entity DigAlarm.S1Counter.interface
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:50:05 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY S1Counter IS
   PORT( 
      Clock        : IN     std_logic;
      CountEN      : IN     std_logic;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      S1overflow   : OUT    std_logic
   );

-- Declarations

END S1Counter ;

-- hds interface_end
--
-- VHDL Architecture DigAlarm.S1Counter.fsm
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:50:05 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE fsm OF S1Counter IS

   -- Architecture Declarations
   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s3,
      s4,
      s9,
      s6,
      s7,
      s8,
      s5
   );

   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state" ;


   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE ;
   SIGNAL next_state : STATE_TYPE ;

BEGIN

   ----------------------------------------------------------------------------
   clocked : PROCESS(
      Clock
   )
   ----------------------------------------------------------------------------
   BEGIN
      IF (Clock'EVENT AND Clock = '1') THEN
         current_state <= next_state;
         -- Default Assignment To Internals

      END IF;

   END PROCESS clocked;

   ----------------------------------------------------------------------------
   nextstate : PROCESS (
      Clock,
      CountEN,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      CASE current_state IS
      WHEN s0 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s1;
         ELSE
            next_state <= s0;
         END IF;
      WHEN s1 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s2;
         ELSE
            next_state <= s1;
         END IF;
      WHEN s2 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s3;
         ELSE
            next_state <= s2;
         END IF;
      WHEN s3 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s4;
         ELSE
            next_state <= s3;
         END IF;
      WHEN s4 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s5;
         ELSE
            next_state <= s4;
         END IF;
      WHEN s9 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s0;
         ELSE
            next_state <= s9;
         END IF;
      WHEN s6 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s7;
         ELSE
            next_state <= s6;
         END IF;
      WHEN s7 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s8;
         ELSE
            next_state <= s7;
         END IF;
      WHEN s8 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s9;
         ELSE
            next_state <= s8;
         END IF;
      WHEN s5 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            next_state <= s6;
         ELSE
            next_state <= s5;
         END IF;
      WHEN OTHERS =>
         next_state <= s0;
      END CASE;

   END PROCESS nextstate;

   ----------------------------------------------------------------------------
   output : PROCESS (
      Clock,
      CountEN,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      -- Default Assignment
      S1overflow <= '0';
      -- Default Assignment To Internals

      -- Transition Actions
      CASE current_state IS
      WHEN s9 =>
         IF (Clock = '1' AND CountEN = '1') THEN
            S1overflow <=  '1';
         END IF;
      WHEN OTHERS =>
         NULL;
      END CASE;

   END PROCESS output;

   -- Concurrent Statements

END fsm;
