-- hds header_start
--
-- VHDL Entity DigAlarm.M2Counter.interface
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:54:01 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY M2Counter IS
   PORT( 
      Clock        : IN     std_logic;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      M1overflow   : IN     std_logic;
      M2           : OUT    std_logic_vector (3 DOWNTO 0);
      M2overflow   : OUT    std_logic
   );

-- Declarations

END M2Counter ;

-- hds interface_end
--
-- VHDL Architecture DigAlarm.M2Counter.fsm
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:54:02 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE fsm OF M2Counter IS

   -- Architecture Declarations
   TYPE STATE_TYPE IS (
      s0,
      s1,
      s2,
      s5,
      s3,
      s4
   );

   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state" ;


   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE ;
   SIGNAL next_state : STATE_TYPE ;

BEGIN

   ----------------------------------------------------------------------------
   clocked : PROCESS(
      M1overflow
   )
   ----------------------------------------------------------------------------
   BEGIN
      IF (M1overflow'EVENT AND M1overflow = '1') THEN
         current_state <= next_state;
         -- Default Assignment To Internals

      END IF;

   END PROCESS clocked;

   ----------------------------------------------------------------------------
   nextstate : PROCESS (
      M1overflow,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      CASE current_state IS
      WHEN s0 =>
         IF (M1overflow = '1') THEN
            next_state <= s1;
         ELSE
            next_state <= s0;
         END IF;
      WHEN s1 =>
         IF (M1overflow = '1') THEN
            next_state <= s2;
         ELSE
            next_state <= s1;
         END IF;
      WHEN s2 =>
         IF (M1overflow = '1') THEN
            next_state <= s3;
         ELSE
            next_state <= s2;
         END IF;
      WHEN s5 =>
         IF (M1overflow = '1') THEN
            next_state <= s0;
         ELSE
            next_state <= s5;
         END IF;
      WHEN s3 =>
         IF (M1overflow = '1') THEN
            next_state <= s4;
         ELSE
            next_state <= s3;
         END IF;
      WHEN s4 =>
         IF (M1overflow = '1') THEN
            next_state <= s5;
         ELSE
            next_state <= s4;
         END IF;
      WHEN OTHERS =>
         next_state <= s0;
      END CASE;

   END PROCESS nextstate;

   ----------------------------------------------------------------------------
   output : PROCESS (
      M1overflow,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      -- Default Assignment
      M2 <= "0000";
      M2overflow <= '0';
      -- Default Assignment To Internals

      -- State Actions
      CASE current_state IS
      WHEN s0 =>
         M2 <= "0000";
      WHEN s1 =>
         M2 <= "0001";
      WHEN s2 =>
         M2 <= "0010";
      WHEN s5 =>
         M2 <= "0101";
      WHEN s3 =>
         M2 <= "0011";
      WHEN s4 =>
         M2 <= "0100";
      WHEN OTHERS =>
         NULL;
      END CASE;

      -- Transition Actions
      CASE current_state IS
      WHEN s5 =>
         IF (M1overflow = '1') THEN
            M2overflow <= '1';
         END IF;
      WHEN OTHERS =>
         NULL;
      END CASE;

   END PROCESS output;

   -- Concurrent Statements

END fsm;
