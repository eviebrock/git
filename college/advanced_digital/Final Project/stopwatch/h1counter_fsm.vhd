-- hds header_start
--
-- VHDL Entity DigAlarm.H1Counter.interface
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:55:00 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
-- hds header_end
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ENTITY H1Counter IS
   PORT( 
      Clock        : IN     std_logic;
      DisplayClock : IN     std_logic_vector (7 DOWNTO 0);
      M2overflow   : IN     std_logic;
      TimeHour     : IN     std_logic;
      H1           : OUT    std_logic_vector (3 DOWNTO 0);
      H2           : OUT    std_logic_vector (3 DOWNTO 0)
   );

-- Declarations

END H1Counter ;

-- hds interface_end
--
-- VHDL Architecture DigAlarm.H1Counter.fsm
--
-- Created:
--          by - Hawley001.UNKNOWN (Z314ECEPC11)
--          at - 13:55:00 12/09/02
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2001.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE fsm OF H1Counter IS

   -- Architecture Declarations
   TYPE STATE_TYPE IS (
      s1,
      s2,
      s3,
      s4,
      s5,
      s6,
      s7,
      s8,
      s9,
      s10,
      s11,
      s12
   );

   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state" ;


   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE ;
   SIGNAL next_state : STATE_TYPE ;

BEGIN

   ----------------------------------------------------------------------------
   clocked : PROCESS(
      M2overflow
   )
   ----------------------------------------------------------------------------
   BEGIN
      IF (M2overflow'EVENT AND M2overflow = '1') THEN
         current_state <= next_state;
         -- Default Assignment To Internals

      END IF;

   END PROCESS clocked;

   ----------------------------------------------------------------------------
   nextstate : PROCESS (
      M2overflow,
      TimeHour,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      CASE current_state IS
      WHEN s1 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s2;
         ELSE
            next_state <= s1;
         END IF;
      WHEN s2 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s3;
         ELSE
            next_state <= s2;
         END IF;
      WHEN s3 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s4;
         ELSE
            next_state <= s3;
         END IF;
      WHEN s4 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s5;
         ELSE
            next_state <= s4;
         END IF;
      WHEN s5 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s6;
         ELSE
            next_state <= s5;
         END IF;
      WHEN s6 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s7;
         ELSE
            next_state <= s6;
         END IF;
      WHEN s7 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s8;
         ELSE
            next_state <= s7;
         END IF;
      WHEN s8 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s9;
         ELSE
            next_state <= s8;
         END IF;
      WHEN s9 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s10;
         ELSE
            next_state <= s9;
         END IF;
      WHEN s10 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s11;
         ELSE
            next_state <= s10;
         END IF;
      WHEN s11 =>
            next_state <= s12;
      WHEN s12 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            next_state <= s1;
         ELSE
            next_state <= s12;
         END IF;
      WHEN OTHERS =>
         next_state <= s12;
      END CASE;

   END PROCESS nextstate;

   ----------------------------------------------------------------------------
   output : PROCESS (
      M2overflow,
      TimeHour,
      current_state
   )
   ----------------------------------------------------------------------------
   BEGIN
      -- Default Assignment
      H1 <= "0000";
      H2 <= "0000";
      -- Default Assignment To Internals

      -- State Actions
      CASE current_state IS
      WHEN s1 =>
         H1 <= "0001";
      WHEN s2 =>
         H1 <= "0010";
      WHEN s3 =>
         H1 <= "0011";
      WHEN s4 =>
         H1 <= "0100";
      WHEN s5 =>
         H1 <= "0101";
      WHEN s6 =>
         H1 <= "0110";
      WHEN s7 =>
         H1 <= "0111";
      WHEN s8 =>
         H1 <= "1000";
      WHEN s9 =>
         H1 <= "1001";
      WHEN s10 =>
         H1 <= "0000"; 
         H2 <= "0001";
      WHEN s11 =>
         H1 <= "0001";
         H2 <= "0001";
      WHEN s12 =>
         H1 <= "0010";
         H2 <= "0001";
      WHEN OTHERS =>
         NULL;
      END CASE;

      -- Transition Actions
      CASE current_state IS
      WHEN s12 =>
         IF (M2overflow = '1' OR TimeHour = '1') THEN
            H2 <= "0000";
         END IF;
      WHEN OTHERS =>
         NULL;
      END CASE;

   END PROCESS output;

   -- Concurrent Statements

END fsm;
