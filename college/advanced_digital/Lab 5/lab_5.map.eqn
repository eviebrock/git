-- Copyright (C) 1991-2010 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--B1L1 is clk:blah|Add0~0
B1L1 = B1_Count[0] $ (VCC);

--B1L2 is clk:blah|Add0~1
B1L2 = CARRY(B1_Count[0]);


--B1L3 is clk:blah|Add0~2
B1L3 = (B1_Count[1] & (!B1L2)) # (!B1_Count[1] & ((B1L2) # (GND)));

--B1L4 is clk:blah|Add0~3
B1L4 = CARRY((!B1L2) # (!B1_Count[1]));


--B1L5 is clk:blah|Add0~4
B1L5 = (B1_Count[2] & (B1L4 $ (GND))) # (!B1_Count[2] & (!B1L4 & VCC));

--B1L6 is clk:blah|Add0~5
B1L6 = CARRY((B1_Count[2] & !B1L4));


--B1L7 is clk:blah|Add0~6
B1L7 = (B1_Count[3] & (!B1L6)) # (!B1_Count[3] & ((B1L6) # (GND)));

--B1L8 is clk:blah|Add0~7
B1L8 = CARRY((!B1L6) # (!B1_Count[3]));


--B1L9 is clk:blah|Add0~8
B1L9 = (B1_Count[4] & (B1L8 $ (GND))) # (!B1_Count[4] & (!B1L8 & VCC));

--B1L10 is clk:blah|Add0~9
B1L10 = CARRY((B1_Count[4] & !B1L8));


--B1L11 is clk:blah|Add0~10
B1L11 = (B1_Count[5] & (!B1L10)) # (!B1_Count[5] & ((B1L10) # (GND)));

--B1L12 is clk:blah|Add0~11
B1L12 = CARRY((!B1L10) # (!B1_Count[5]));


--B1L13 is clk:blah|Add0~12
B1L13 = (B1_Count[6] & (B1L12 $ (GND))) # (!B1_Count[6] & (!B1L12 & VCC));

--B1L14 is clk:blah|Add0~13
B1L14 = CARRY((B1_Count[6] & !B1L12));


--B1L15 is clk:blah|Add0~14
B1L15 = (B1_Count[7] & (!B1L14)) # (!B1_Count[7] & ((B1L14) # (GND)));

--B1L16 is clk:blah|Add0~15
B1L16 = CARRY((!B1L14) # (!B1_Count[7]));


--B1L17 is clk:blah|Add0~16
B1L17 = (B1_Count[8] & (B1L16 $ (GND))) # (!B1_Count[8] & (!B1L16 & VCC));

--B1L18 is clk:blah|Add0~17
B1L18 = CARRY((B1_Count[8] & !B1L16));


--B1L19 is clk:blah|Add0~18
B1L19 = (B1_Count[9] & (!B1L18)) # (!B1_Count[9] & ((B1L18) # (GND)));

--B1L20 is clk:blah|Add0~19
B1L20 = CARRY((!B1L18) # (!B1_Count[9]));


--B1L21 is clk:blah|Add0~20
B1L21 = (B1_Count[10] & (B1L20 $ (GND))) # (!B1_Count[10] & (!B1L20 & VCC));

--B1L22 is clk:blah|Add0~21
B1L22 = CARRY((B1_Count[10] & !B1L20));


--B1L23 is clk:blah|Add0~22
B1L23 = (B1_Count[11] & (!B1L22)) # (!B1_Count[11] & ((B1L22) # (GND)));

--B1L24 is clk:blah|Add0~23
B1L24 = CARRY((!B1L22) # (!B1_Count[11]));


--B1L25 is clk:blah|Add0~24
B1L25 = (B1_Count[12] & (B1L24 $ (GND))) # (!B1_Count[12] & (!B1L24 & VCC));

--B1L26 is clk:blah|Add0~25
B1L26 = CARRY((B1_Count[12] & !B1L24));


--B1L27 is clk:blah|Add0~26
B1L27 = (B1_Count[13] & (!B1L26)) # (!B1_Count[13] & ((B1L26) # (GND)));

--B1L28 is clk:blah|Add0~27
B1L28 = CARRY((!B1L26) # (!B1_Count[13]));


--B1L29 is clk:blah|Add0~28
B1L29 = (B1_Count[14] & (B1L28 $ (GND))) # (!B1_Count[14] & (!B1L28 & VCC));

--B1L30 is clk:blah|Add0~29
B1L30 = CARRY((B1_Count[14] & !B1L28));


--B1L31 is clk:blah|Add0~30
B1L31 = (B1_Count[15] & (!B1L30)) # (!B1_Count[15] & ((B1L30) # (GND)));

--B1L32 is clk:blah|Add0~31
B1L32 = CARRY((!B1L30) # (!B1_Count[15]));


--B1L33 is clk:blah|Add0~32
B1L33 = (B1_Count[16] & (B1L32 $ (GND))) # (!B1_Count[16] & (!B1L32 & VCC));

--B1L34 is clk:blah|Add0~33
B1L34 = CARRY((B1_Count[16] & !B1L32));


--B1L35 is clk:blah|Add0~34
B1L35 = (B1_Count[17] & (!B1L34)) # (!B1_Count[17] & ((B1L34) # (GND)));

--B1L36 is clk:blah|Add0~35
B1L36 = CARRY((!B1L34) # (!B1_Count[17]));


--B1L37 is clk:blah|Add0~36
B1L37 = (B1_Count[18] & (B1L36 $ (GND))) # (!B1_Count[18] & (!B1L36 & VCC));

--B1L38 is clk:blah|Add0~37
B1L38 = CARRY((B1_Count[18] & !B1L36));


--B1L39 is clk:blah|Add0~38
B1L39 = (B1_Count[19] & (!B1L38)) # (!B1_Count[19] & ((B1L38) # (GND)));

--B1L40 is clk:blah|Add0~39
B1L40 = CARRY((!B1L38) # (!B1_Count[19]));


--B1L41 is clk:blah|Add0~40
B1L41 = (B1_Count[20] & (B1L40 $ (GND))) # (!B1_Count[20] & (!B1L40 & VCC));

--B1L42 is clk:blah|Add0~41
B1L42 = CARRY((B1_Count[20] & !B1L40));


--B1L43 is clk:blah|Add0~42
B1L43 = (B1_Count[21] & (!B1L42)) # (!B1_Count[21] & ((B1L42) # (GND)));

--B1L44 is clk:blah|Add0~43
B1L44 = CARRY((!B1L42) # (!B1_Count[21]));


--B1L45 is clk:blah|Add0~44
B1L45 = (B1_Count[22] & (B1L44 $ (GND))) # (!B1_Count[22] & (!B1L44 & VCC));

--B1L46 is clk:blah|Add0~45
B1L46 = CARRY((B1_Count[22] & !B1L44));


--B1L47 is clk:blah|Add0~46
B1L47 = B1_Count[23] $ (B1L46);


--devA is devA
devA = OUTPUT(A1L5Q);


--riseSend is riseSend
riseSend = OUTPUT(rise_send);


--devAView is devAView
devAView = OUTPUT(A1L5Q);


--devBView is devBView
devBView = OUTPUT(devB);


--A1L5Q is devA~reg0
A1L5Q = DFFEAS(A1L4, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--rise_send is rise_send
rise_send = DFFEAS(A1L16, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--devB is devB
devB = INPUT();


--y.s2 is y.s2
y.s2 = DFFEAS(A1L24, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--y.idle is y.idle
y.idle = DFFEAS(A1L20, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--A1L4 is devA~2
A1L4 = (!y.s2 & y.idle);


--B1_clkstate is clk:blah|clkstate
B1_clkstate = DFFEAS(B1L50, clkin,  ,  ,  ,  ,  ,  ,  );


--SEND1 is SEND1
SEND1 = DFFEAS(A1L28, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--SEND2 is SEND2
SEND2 = DFFEAS(SEND1, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--A1L16 is rise_send~0
A1L16 = (SEND1 & !SEND2);


--rise_devB is rise_devB
rise_devB = DFFEAS(A1L14, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--y.s1 is y.s1
y.s1 = DFFEAS(A1L22, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--fall_devB is fall_devB
fall_devB = DFFEAS(A1L11, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--reset is reset
reset = INPUT();


--A1L23 is Selector2~0
A1L23 = (!fall_devB & !reset);


--A1L24 is Selector2~1
A1L24 = (y.s2 & ((A1L23) # ((rise_devB & y.s1)))) # (!y.s2 & (rise_devB & (y.s1)));


--y.recieve is y.recieve
y.recieve = DFFEAS(A1L25, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--A1L18 is Selector0~0
A1L18 = (y.s2 & (((fall_devB) # (reset)))) # (!y.s2 & (y.recieve & ((fall_devB) # (reset))));


--A1L19 is Selector0~1
A1L19 = (reset & ((y.s1) # ((!rise_send & !y.idle)))) # (!reset & (((!rise_send & !y.idle))));


--A1L20 is Selector0~2
A1L20 = (!A1L18 & ((rise_devB) # (!A1L19)));


--B1_Count[9] is clk:blah|Count[9]
B1_Count[9] = DFFEAS(B1L76, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[6] is clk:blah|Count[6]
B1_Count[6] = DFFEAS(B1L77, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[8] is clk:blah|Count[8]
B1_Count[8] = DFFEAS(B1L17, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[7] is clk:blah|Count[7]
B1_Count[7] = DFFEAS(B1L15, clkin,  ,  ,  ,  ,  ,  ,  );


--B1L91 is clk:blah|Equal0~0
B1L91 = (B1_Count[9] & (B1_Count[6] & (!B1_Count[8] & !B1_Count[7])));


--B1_Count[5] is clk:blah|Count[5]
B1_Count[5] = DFFEAS(B1L78, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[4] is clk:blah|Count[4]
B1_Count[4] = DFFEAS(B1L9, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[3] is clk:blah|Count[3]
B1_Count[3] = DFFEAS(B1L7, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[2] is clk:blah|Count[2]
B1_Count[2] = DFFEAS(B1L5, clkin,  ,  ,  ,  ,  ,  ,  );


--B1L92 is clk:blah|Equal0~1
B1L92 = (B1_Count[5] & (!B1_Count[4] & (!B1_Count[3] & !B1_Count[2])));


--B1_Count[10] is clk:blah|Count[10]
B1_Count[10] = DFFEAS(B1L79, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[11] is clk:blah|Count[11]
B1_Count[11] = DFFEAS(B1L80, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[1] is clk:blah|Count[1]
B1_Count[1] = DFFEAS(B1L3, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[0] is clk:blah|Count[0]
B1_Count[0] = DFFEAS(B1L81, clkin,  ,  ,  ,  ,  ,  ,  );


--B1L93 is clk:blah|Equal0~2
B1L93 = (B1_Count[10] & (B1_Count[11] & (!B1_Count[1] & !B1_Count[0])));


--B1_Count[12] is clk:blah|Count[12]
B1_Count[12] = DFFEAS(B1L82, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[13] is clk:blah|Count[13]
B1_Count[13] = DFFEAS(B1L83, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[14] is clk:blah|Count[14]
B1_Count[14] = DFFEAS(B1L84, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[15] is clk:blah|Count[15]
B1_Count[15] = DFFEAS(B1L85, clkin,  ,  ,  ,  ,  ,  ,  );


--B1L94 is clk:blah|Equal0~3
B1L94 = (B1_Count[12] & (B1_Count[13] & (B1_Count[14] & B1_Count[15])));


--B1L95 is clk:blah|Equal0~4
B1L95 = (B1L91 & (B1L92 & (B1L93 & B1L94)));


--B1_Count[16] is clk:blah|Count[16]
B1_Count[16] = DFFEAS(B1L86, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[18] is clk:blah|Count[18]
B1_Count[18] = DFFEAS(B1L87, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[19] is clk:blah|Count[19]
B1_Count[19] = DFFEAS(B1L88, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[17] is clk:blah|Count[17]
B1_Count[17] = DFFEAS(B1L35, clkin,  ,  ,  ,  ,  ,  ,  );


--B1L96 is clk:blah|Equal0~5
B1L96 = (B1_Count[16] & (B1_Count[18] & (B1_Count[19] & !B1_Count[17])));


--B1_Count[22] is clk:blah|Count[22]
B1_Count[22] = DFFEAS(B1L89, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[23] is clk:blah|Count[23]
B1_Count[23] = DFFEAS(B1L90, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[20] is clk:blah|Count[20]
B1_Count[20] = DFFEAS(B1L41, clkin,  ,  ,  ,  ,  ,  ,  );


--B1_Count[21] is clk:blah|Count[21]
B1_Count[21] = DFFEAS(B1L43, clkin,  ,  ,  ,  ,  ,  ,  );


--B1L97 is clk:blah|Equal0~6
B1L97 = (B1_Count[22] & (B1_Count[23] & (!B1_Count[20] & !B1_Count[21])));


--B1L50 is clk:blah|clkstate~0
B1L50 = B1_clkstate $ (((B1L95 & (B1L96 & B1L97))));


--clkin is clkin
clkin = INPUT();


--send is send
send = INPUT();


--DEVB1 is DEVB1
DEVB1 = DFFEAS(devB, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--DEVB2 is DEVB2
DEVB2 = DFFEAS(DEVB1, B1_clkstate,  ,  ,  ,  ,  ,  ,  );


--A1L14 is rise_devB~0
A1L14 = (DEVB1 & !DEVB2);


--A1L21 is Selector1~0
A1L21 = (rise_send & (((y.s1 & !reset)) # (!y.idle))) # (!rise_send & (y.s1 & ((!reset))));


--A1L22 is Selector1~1
A1L22 = (A1L21 & !rise_devB);


--A1L11 is fall_devB~0
A1L11 = (DEVB2 & !DEVB1);


--A1L25 is Selector3~0
A1L25 = (y.recieve & ((A1L23) # ((rise_devB & !y.idle)))) # (!y.recieve & (((rise_devB & !y.idle))));


--B1L76 is clk:blah|Count~0
B1L76 = (B1L19 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L77 is clk:blah|Count~1
B1L77 = (B1L13 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L78 is clk:blah|Count~2
B1L78 = (B1L11 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L79 is clk:blah|Count~3
B1L79 = (B1L21 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L80 is clk:blah|Count~4
B1L80 = (B1L23 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L81 is clk:blah|Count~5
B1L81 = (B1L1 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L82 is clk:blah|Count~6
B1L82 = (B1L25 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L83 is clk:blah|Count~7
B1L83 = (B1L27 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L84 is clk:blah|Count~8
B1L84 = (B1L29 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L85 is clk:blah|Count~9
B1L85 = (B1L31 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L86 is clk:blah|Count~10
B1L86 = (B1L33 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L87 is clk:blah|Count~11
B1L87 = (B1L37 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L88 is clk:blah|Count~12
B1L88 = (B1L39 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L89 is clk:blah|Count~13
B1L89 = (B1L45 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--B1L90 is clk:blah|Count~14
B1L90 = (B1L47 & (((!B1L97) # (!B1L96)) # (!B1L95)));


--A1L28 is SEND1~0
A1L28 = !send;


